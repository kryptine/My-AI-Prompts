1. Analog and Symbolic Computation through the Koopman Framework https://arxiv.org/html/2510.05863v1
2. The analogy theorem in Hoare logic https://www.arxiv.org/abs/2510.03685
3. Proof Analogy in Theorem Proving https://cdn.aaai.org/AAAI/1987/AAAI87-017.pdf
4. Complexity Results in Team Semantics: Nonemptiness Is Not So Complex https://arxiv.org/html/2510.08122v1
Can you help me write the initial section of the Agda, Rocq (formerly Coq) and Lean4 formalizations of these papers, with unifications and isomorphisms between the contents of these papers? Of course it can be too big for a single response, but just give me something that will parse, at least with placeholders like `admit` and `sorry` if the thing is too big to fit within the context window, but also provide a copiable infobox that summarizes the content and the APIs so that it can be used to formalize further parts by copying into other chats, from now until completion, although you do not need a complete roadmap now. I want the content to be as formal as possible by using formal syntax instead of identifiers, and avoid defining new types and other primitives, choosing to use generic ones like vectors, lists, matrices, etc. instead. In addition to copying literally the contents of these papers, this also requests synthesis.
Can you please how me how the Koopman framework can be used to model the the construction of analogies in proofs, and tell me how the analogy theorem can be modeled category-theoretically in a way that is isomorphic to team semantics by treating the analogy between the instances as teams and the individual instances as singular models? How does the Koopman Framework apply to theorem proving, and can you explain how the various deduction theorems for intuitionistic logic, linear logic, etc. enable analogical reasoning?